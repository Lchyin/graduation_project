!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDITIONAL_INFO	../include/ur_modern_driver/robot_state.h	/^	ADDITIONAL_INFO = 8,$/;"	e	enum:package_types::package_type
CALIBRATION_DATA	../include/ur_modern_driver/robot_state.h	/^	CALIBRATION_DATA = 9$/;"	e	enum:package_types::package_type
CARTESIAN_INFO	../include/ur_modern_driver/robot_state.h	/^	CARTESIAN_INFO = 4,$/;"	e	enum:package_types::package_type
CONFIGURATION_DATA	../include/ur_modern_driver/robot_state.h	/^	CONFIGURATION_DATA = 6,$/;"	e	enum:package_types::package_type
FORCE_MODE_DATA	../include/ur_modern_driver/robot_state.h	/^	FORCE_MODE_DATA = 7,$/;"	e	enum:package_types::package_type
Init_Pose	./main.cpp	/^bool Init_Pose()$/;"	f
JOINT_DATA	../include/ur_modern_driver/robot_state.h	/^	JOINT_DATA = 1,$/;"	e	enum:package_types::package_type
KINEMATICS_INFO	../include/ur_modern_driver/robot_state.h	/^	KINEMATICS_INFO = 5,$/;"	e	enum:package_types::package_type
MASTERBOARD_DATA	../include/ur_modern_driver/robot_state.h	/^	MASTERBOARD_DATA = 3,$/;"	e	enum:package_types::package_type
MULT_JOINTSTATE_	../include/ur_modern_driver/ur_driver.h	/^	const int MULT_JOINTSTATE_ = 1000000;$/;"	m	class:UrDriver
MULT_TIME_	../include/ur_modern_driver/ur_driver.h	/^	const int MULT_TIME_ = 1000000;$/;"	m	class:UrDriver
MyLine	./main.cpp	/^void MyLine( Mat img, Point start, Point end )$/;"	f
POSITION_STEP_FACTOR	../include/ur_modern_driver/ur_hardware_interface.h	/^static const double POSITION_STEP_FACTOR = 1;$/;"	m	namespace:ros_control_ur
PROGRAM_STATE_MESSAGE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_STATE = 16, ROBOT_MESSAGE = 20, PROGRAM_STATE_MESSAGE = 25$/;"	e	enum:message_types::message_type
PROGRAM_STATE_MESSAGE_VARIABLE_UPDATE	../include/ur_modern_driver/robot_state.h	/^	PROGRAM_STATE_MESSAGE_VARIABLE_UPDATE = 2,$/;"	e	enum:robot_message_types::robot_message_type
Pose	./main.cpp	/^}Pose;$/;"	t	typeref:struct:__anon1	file:
Processor	./main.cpp	/^enum Processor { cl, gl, cpu };$/;"	g	file:
REVERSE_PORT_	../include/ur_modern_driver/ur_driver.h	/^	const unsigned int REVERSE_PORT_;$/;"	m	class:UrDriver
ROBOT_EMERGENCY_STOPPED_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_EMERGENCY_STOPPED_MODE = 5,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_FATAL_ERROR_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_FATAL_ERROR_MODE = 6,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_FREEDRIVE_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_FREEDRIVE_MODE = 1,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_INITIALIZING_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_INITIALIZING_MODE = 3,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_MESSAGE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_STATE = 16, ROBOT_MESSAGE = 20, PROGRAM_STATE_MESSAGE = 25$/;"	e	enum:message_types::message_type
ROBOT_MESSAGE_ERROR_CODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_ERROR_CODE = 6,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_KEY	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_KEY = 7,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_PROGRAM_LABEL	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_PROGRAM_LABEL = 1,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_REQUEST_VALUE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_REQUEST_VALUE = 9,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_RUNTIME_EXCEPTION	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_RUNTIME_EXCEPTION = 10$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_SAFETY_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_SAFETY_MODE = 5,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_TEXT	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_TEXT = 0,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MESSAGE_VERSION	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MESSAGE_VERSION = 3,$/;"	e	enum:robot_message_types::robot_message_type
ROBOT_MODE_BACKDRIVE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_BACKDRIVE = 6,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_BOOTING	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_BOOTING = 2,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_CONFIRM_SAFETY	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_CONFIRM_SAFETY = 1,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_DATA	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_DATA = 0,$/;"	e	enum:package_types::package_type
ROBOT_MODE_DISCONNECTED	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_DISCONNECTED = 0,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_IDLE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_IDLE = 5,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_POWER_OFF	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_POWER_OFF = 3,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_POWER_ON	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_POWER_ON = 4,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_RUNNING	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_RUNNING = 7,$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_MODE_UPDATING_FIRMWARE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_MODE_UPDATING_FIRMWARE = 8$/;"	e	enum:robot_state_type_v30::robot_state_type
ROBOT_NOT_CONNECTED_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_NOT_CONNECTED_MODE = 8,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_NO_POWER_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_NO_POWER_MODE = 7,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_READY_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_READY_MODE = 2,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_RUNNING_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_RUNNING_MODE = 0,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_SAFEGUARD_STOP_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_SAFEGUARD_STOP_MODE = 10$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_SECURITY_STOPPED_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_SECURITY_STOPPED_MODE = 4,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_SHUTDOWN_MODE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_SHUTDOWN_MODE = 9,$/;"	e	enum:robot_state_type_v18::robot_state_type
ROBOT_STATE	../include/ur_modern_driver/robot_state.h	/^	ROBOT_STATE = 16, ROBOT_MESSAGE = 20, PROGRAM_STATE_MESSAGE = 25$/;"	e	enum:message_types::message_type
ROBOT_STATE_H_	../include/ur_modern_driver/robot_state.h	20;"	d
ROBOT_STATE_RT_H_	../include/ur_modern_driver/robot_state_RT.h	20;"	d
Rec	./main.cpp	/^bool Rec(std::vector<Pose> poins_rect)$/;"	f
RobotState	../include/ur_modern_driver/robot_state.h	/^class RobotState {$/;"	c
RobotState	./robot_state.cpp	/^RobotState::RobotState(std::condition_variable& msg_cond) {$/;"	f	class:RobotState
RobotStateRT	../include/ur_modern_driver/robot_state_RT.h	/^class RobotStateRT {$/;"	c
RobotStateRT	./robot_state_RT.cpp	/^RobotStateRT::RobotStateRT(std::condition_variable& msg_cond) {$/;"	f	class:RobotStateRT
TOOL_DATA	../include/ur_modern_driver/robot_state.h	/^	TOOL_DATA = 2,$/;"	e	enum:package_types::package_type
UR_COMMUNICATION_H_	../include/ur_modern_driver/ur_communication.h	20;"	d
UR_DO_OUTPUT_H_	../include/ur_modern_driver/do_output.h	20;"	d
UR_DRIVER_H_	../include/ur_modern_driver/ur_driver.h	20;"	d
UR_REALTIME_COMMUNICATION_H_	../include/ur_modern_driver/ur_realtime_communication.h	20;"	d
UR_ROS_CONTROL_UR_HARDWARE_INTERFACE_H	../include/ur_modern_driver/ur_hardware_interface.h	59;"	d
Ur	./main.cpp	/^UrRealtimeCommunication * Ur;$/;"	v
UrCommunication	../include/ur_modern_driver/ur_communication.h	/^class UrCommunication {$/;"	c
UrCommunication	./ur_communication.cpp	/^UrCommunication::UrCommunication(std::condition_variable& msg_cond,$/;"	f	class:UrCommunication
UrDriver	../include/ur_modern_driver/ur_driver.h	/^class UrDriver {$/;"	c
UrDriver	./ur_driver.cpp	/^UrDriver::UrDriver(std::condition_variable& rt_msg_cond,$/;"	f	class:UrDriver
UrHardwareInterface	../include/ur_modern_driver/ur_hardware_interface.h	/^class UrHardwareInterface: public hardware_interface::RobotHW {$/;"	c	namespace:ros_control_ur
UrRealtimeCommunication	../include/ur_modern_driver/ur_realtime_communication.h	/^class UrRealtimeCommunication {$/;"	c
UrRealtimeCommunication	./ur_realtime_communication.cpp	/^UrRealtimeCommunication::UrRealtimeCommunication($/;"	f	class:UrRealtimeCommunication
VELOCITY_STEP_FACTOR	../include/ur_modern_driver/ur_hardware_interface.h	/^static const double VELOCITY_STEP_FACTOR = 1;$/;"	m	namespace:ros_control_ur
addCommandToQueue	./ur_realtime_communication.cpp	/^bool UrRealtimeCommunication::addCommandToQueue(std::string inp) {$/;"	f	class:UrRealtimeCommunication
analogInput0	../include/ur_modern_driver/robot_state.h	/^	double analogInput0;$/;"	m	struct:masterboard_data
analogInput1	../include/ur_modern_driver/robot_state.h	/^	double analogInput1;$/;"	m	struct:masterboard_data
analogInputRange0	../include/ur_modern_driver/robot_state.h	/^	char analogInputRange0;$/;"	m	struct:masterboard_data
analogInputRange1	../include/ur_modern_driver/robot_state.h	/^	char analogInputRange1;$/;"	m	struct:masterboard_data
analogOutput0	../include/ur_modern_driver/robot_state.h	/^	double analogOutput0;$/;"	m	struct:masterboard_data
analogOutput1	../include/ur_modern_driver/robot_state.h	/^	double analogOutput1;$/;"	m	struct:masterboard_data
analogOutputDomain0	../include/ur_modern_driver/robot_state.h	/^	char analogOutputDomain0;$/;"	m	struct:masterboard_data
analogOutputDomain1	../include/ur_modern_driver/robot_state.h	/^	char analogOutputDomain1;$/;"	m	struct:masterboard_data
angel	./main.cpp	/^bool angel(std::vector<Pose> poins_ag)$/;"	f
backprojMode	./main.cpp	/^bool backprojMode = false;$/;"	v
build_date	../include/ur_modern_driver/robot_state.h	/^	char build_date[25];$/;"	m	struct:version_message
cal_pose	./main.cpp	/^void cal_pose(Pose center, float r)$/;"	f
cc_pose	./main.cpp	/^std::vector<Pose> cc_pose(std::vector<cv::Point> points_lines){$/;"	f
circle	./main.cpp	/^bool circle(std::vector<Pose> poins_circle)$/;"	f
cl	./main.cpp	/^enum Processor { cl, gl, cpu };$/;"	e	enum:Processor	file:
closeServo	./ur_driver.cpp	/^void UrDriver::closeServo(std::vector<double> positions) {$/;"	f	class:UrDriver
comThread_	../include/ur_modern_driver/ur_communication.h	/^	std::thread comThread_;$/;"	m	class:UrCommunication
comThread_	../include/ur_modern_driver/ur_realtime_communication.h	/^	std::thread comThread_;$/;"	m	class:UrRealtimeCommunication
command_	../include/ur_modern_driver/ur_realtime_communication.h	/^	std::string command_;$/;"	m	class:UrRealtimeCommunication
command_string_lock_	../include/ur_modern_driver/ur_realtime_communication.h	/^	std::recursive_mutex command_string_lock_;$/;"	m	class:UrRealtimeCommunication
connected_	../include/ur_modern_driver/ur_communication.h	/^	bool connected_;$/;"	m	class:UrCommunication
connected_	../include/ur_modern_driver/ur_realtime_communication.h	/^	bool connected_;$/;"	m	class:UrRealtimeCommunication
controlMode	../include/ur_modern_driver/robot_state.h	/^	unsigned char controlMode;$/;"	m	struct:robot_mode_data
controller_timer_	../include/ur_modern_driver/robot_state_RT.h	/^	double controller_timer_; \/\/Controller realtime thread execution time$/;"	m	class:RobotStateRT
controller_updated_	../include/ur_modern_driver/robot_state_RT.h	/^	bool controller_updated_; \/\/to avoid spurious wakes$/;"	m	class:RobotStateRT
cpu	./main.cpp	/^enum Processor { cl, gl, cpu };$/;"	e	enum:Processor	file:
cross	./main.cpp	/^void  cross(Mat& src,cv::Point center)$/;"	f
data_published_	../include/ur_modern_driver/robot_state_RT.h	/^	bool data_published_; \/\/to avoid spurious wakes$/;"	m	class:RobotStateRT
dev	./main.cpp	/^libfreenect2::Freenect2Device *dev ;$/;"	v
digitalInputBits	../include/ur_modern_driver/robot_state.h	/^	int digitalInputBits;$/;"	m	struct:masterboard_data
digitalOutputBits	../include/ur_modern_driver/robot_state.h	/^	int digitalOutputBits;$/;"	m	struct:masterboard_data
digital_input_bits_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<bool> digital_input_bits_; \/\/Current state of the digital inputs. NOTE: these are bits encoded as int64_t, e.g. a value of 5 corresponds to bit 0 and bit 2 set high$/;"	m	class:RobotStateRT
doTraj	./ur_driver.cpp	/^bool UrDriver::doTraj(std::vector<double> inp_timestamps,$/;"	f	class:UrDriver
euromap67InterfaceInstalled	../include/ur_modern_driver/robot_state.h	/^	char euromap67InterfaceInstalled;$/;"	m	struct:masterboard_data
euromapCurrent	../include/ur_modern_driver/robot_state.h	/^	float euromapCurrent;$/;"	m	struct:masterboard_data
euromapInputBits	../include/ur_modern_driver/robot_state.h	/^	int euromapInputBits;$/;"	m	struct:masterboard_data
euromapOutputBits	../include/ur_modern_driver/robot_state.h	/^	int euromapOutputBits;$/;"	m	struct:masterboard_data
euromapVoltage	../include/ur_modern_driver/robot_state.h	/^	float euromapVoltage;$/;"	m	struct:masterboard_data
executing_traj_	../include/ur_modern_driver/ur_driver.h	/^	bool executing_traj_;$/;"	m	class:UrDriver
finishedReading	./robot_state.cpp	/^void RobotState::finishedReading() {$/;"	f	class:RobotState
firmware_version_	../include/ur_modern_driver/ur_driver.h	/^	double firmware_version_;$/;"	m	class:UrDriver
flag_	../include/ur_modern_driver/ur_communication.h	/^	int flag_;$/;"	m	class:UrCommunication
flag_	../include/ur_modern_driver/ur_realtime_communication.h	/^	int flag_;$/;"	m	class:UrRealtimeCommunication
force_torque_interface_	../include/ur_modern_driver/ur_hardware_interface.h	/^	hardware_interface::ForceTorqueSensorInterface force_torque_interface_;$/;"	m	class:ros_control_ur::UrHardwareInterface
frames	./main.cpp	/^libfreenect2::FrameMap frames;$/;"	v
getAnalogInput0	./robot_state.cpp	/^double RobotState::getAnalogInput0() {$/;"	f	class:RobotState
getAnalogInput1	./robot_state.cpp	/^double RobotState::getAnalogInput1() {$/;"	f	class:RobotState
getAnalogOutput0	./robot_state.cpp	/^double RobotState::getAnalogOutput0() {$/;"	f	class:RobotState
getAnalogOutput1	./robot_state.cpp	/^double RobotState::getAnalogOutput1() {$/;"	f	class:RobotState
getControllerTimer	./robot_state_RT.cpp	/^double RobotStateRT::getControllerTimer() {$/;"	f	class:RobotStateRT
getControllerUpdated	./robot_state_RT.cpp	/^bool RobotStateRT::getControllerUpdated() {$/;"	f	class:RobotStateRT
getDataPublished	./robot_state_RT.cpp	/^bool RobotStateRT::getDataPublished() {$/;"	f	class:RobotStateRT
getDigitalInputBits	./robot_state.cpp	/^int RobotState::getDigitalInputBits() {$/;"	f	class:RobotState
getDigitalInputBits	./robot_state_RT.cpp	/^std::vector<bool> RobotStateRT::getDigitalInputBits() {$/;"	f	class:RobotStateRT
getDigitalOutputBits	./robot_state.cpp	/^int RobotState::getDigitalOutputBits() {$/;"	f	class:RobotState
getIActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getIActual() {$/;"	f	class:RobotStateRT
getIControl	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getIControl() {$/;"	f	class:RobotStateRT
getIRobot	./robot_state_RT.cpp	/^double RobotStateRT::getIRobot() {$/;"	f	class:RobotStateRT
getITarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getITarget() {$/;"	f	class:RobotStateRT
getJointModes	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getJointModes() {$/;"	f	class:RobotStateRT
getJointNames	./ur_driver.cpp	/^std::vector<std::string> UrDriver::getJointNames() {$/;"	f	class:UrDriver
getLinearMomentumNorm	./robot_state_RT.cpp	/^double RobotStateRT::getLinearMomentumNorm() {$/;"	f	class:RobotStateRT
getLocalIp	./ur_realtime_communication.cpp	/^std::string UrRealtimeCommunication::getLocalIp() {$/;"	f	class:UrRealtimeCommunication
getMTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getMTarget() {$/;"	f	class:RobotStateRT
getMotorTemperatures	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getMotorTemperatures() {$/;"	f	class:RobotStateRT
getNewDataAvailable	./robot_state.cpp	/^bool RobotState::getNewDataAvailable() {$/;"	f	class:RobotState
getQActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getQActual() {$/;"	f	class:RobotStateRT
getQTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getQTarget() {$/;"	f	class:RobotStateRT
getQdActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getQdActual() {$/;"	f	class:RobotStateRT
getQdTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getQdTarget() {$/;"	f	class:RobotStateRT
getQddTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getQddTarget() {$/;"	f	class:RobotStateRT
getRobotMode	./robot_state.cpp	/^unsigned char RobotState::getRobotMode() {$/;"	f	class:RobotState
getRobotMode	./robot_state_RT.cpp	/^double RobotStateRT::getRobotMode() {$/;"	f	class:RobotStateRT
getSafety_mode	./robot_state_RT.cpp	/^double RobotStateRT::getSafety_mode() {$/;"	f	class:RobotStateRT
getSpeedScaling	./robot_state_RT.cpp	/^double RobotStateRT::getSpeedScaling() {$/;"	f	class:RobotStateRT
getTcpForce	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getTcpForce() {$/;"	f	class:RobotStateRT
getTcpSpeedActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getTcpSpeedActual() {$/;"	f	class:RobotStateRT
getTcpSpeedTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getTcpSpeedTarget() {$/;"	f	class:RobotStateRT
getTime	./robot_state_RT.cpp	/^double RobotStateRT::getTime() {$/;"	f	class:RobotStateRT
getToolAccelerometerValues	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getToolAccelerometerValues() {$/;"	f	class:RobotStateRT
getToolVectorActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getToolVectorActual() {$/;"	f	class:RobotStateRT
getToolVectorTarget	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getToolVectorTarget() {$/;"	f	class:RobotStateRT
getVActual	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::getVActual() {$/;"	f	class:RobotStateRT
getVMain	./robot_state_RT.cpp	/^double RobotStateRT::getVMain() {$/;"	f	class:RobotStateRT
getVRobot	./robot_state_RT.cpp	/^double RobotStateRT::getVRobot() {$/;"	f	class:RobotStateRT
getVersion	./robot_state.cpp	/^double RobotState::getVersion() {$/;"	f	class:RobotState
getVersion	./robot_state_RT.cpp	/^double RobotStateRT::getVersion() {$/;"	f	class:RobotStateRT
gl	./main.cpp	/^enum Processor { cl, gl, cpu };$/;"	e	enum:Processor	file:
halt	./ur_communication.cpp	/^void UrCommunication::halt() {$/;"	f	class:UrCommunication
halt	./ur_driver.cpp	/^void UrDriver::halt() {$/;"	f	class:UrDriver
halt	./ur_realtime_communication.cpp	/^void UrRealtimeCommunication::halt() {$/;"	f	class:UrRealtimeCommunication
i_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> i_actual_; \/\/Actual joint currents$/;"	m	class:RobotStateRT
i_control_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> i_control_; \/\/Joint control currents$/;"	m	class:RobotStateRT
i_robot_	../include/ur_modern_driver/robot_state_RT.h	/^	double i_robot_; \/\/Masterboard: Robot current$/;"	m	class:RobotStateRT
i_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> i_target_; \/\/Target joint currents$/;"	m	class:RobotStateRT
image	./main.cpp	/^Mat image;$/;"	v
incoming_sockfd_	../include/ur_modern_driver/ur_driver.h	/^	int incoming_sockfd_;$/;"	m	class:UrDriver
init	./main.cpp	/^bool init(int type){$/;"	f
interp_cubic	./ur_driver.cpp	/^std::vector<double> UrDriver::interp_cubic(double t, double T,$/;"	f	class:UrDriver
ip_addr_	../include/ur_modern_driver/ur_driver.h	/^	std::string ip_addr_;$/;"	m	class:UrDriver
isEmergencyStopped	../include/ur_modern_driver/robot_state.h	/^	bool isEmergencyStopped;$/;"	m	struct:robot_mode_data
isEmergencyStopped	./robot_state.cpp	/^bool RobotState::isEmergencyStopped() {$/;"	f	class:RobotState
isPowerOnRobot	../include/ur_modern_driver/robot_state.h	/^	bool isPowerOnRobot;$/;"	m	struct:robot_mode_data
isPowerOnRobot	./robot_state.cpp	/^bool RobotState::isPowerOnRobot() {$/;"	f	class:RobotState
isProgramPaused	../include/ur_modern_driver/robot_state.h	/^	bool isProgramPaused;$/;"	m	struct:robot_mode_data
isProgramPaused	./robot_state.cpp	/^bool RobotState::isProgramPaused() {$/;"	f	class:RobotState
isProgramRunning	../include/ur_modern_driver/robot_state.h	/^	bool isProgramRunning;$/;"	m	struct:robot_mode_data
isProgramRunning	./robot_state.cpp	/^bool RobotState::isProgramRunning() {$/;"	f	class:RobotState
isProtectiveStopped	../include/ur_modern_driver/robot_state.h	/^	bool isProtectiveStopped;$/;"	m	struct:robot_mode_data
isProtectiveStopped	./robot_state.cpp	/^bool RobotState::isProtectiveStopped() {$/;"	f	class:RobotState
isReady	./robot_state.cpp	/^bool RobotState::isReady() {$/;"	f	class:RobotState
isRealRobotEnabled	../include/ur_modern_driver/robot_state.h	/^	bool isRealRobotEnabled;$/;"	m	struct:robot_mode_data
isRealRobotEnabled	./robot_state.cpp	/^bool RobotState::isRealRobotEnabled() {$/;"	f	class:RobotState
isRobotConnected	../include/ur_modern_driver/robot_state.h	/^	bool isRobotConnected;$/;"	m	struct:robot_mode_data
isRobotConnected	./robot_state.cpp	/^bool RobotState::isRobotConnected() {$/;"	f	class:RobotState
joint_effort_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> joint_effort_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_modes_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> joint_modes_; \/\/Joint control modes$/;"	m	class:RobotStateRT
joint_names_	../include/ur_modern_driver/ur_driver.h	/^	std::vector<std::string> joint_names_;$/;"	m	class:UrDriver
joint_names_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<std::string> joint_names_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_position_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> joint_position_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_position_command_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> joint_position_command_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_state_interface_	../include/ur_modern_driver/ur_hardware_interface.h	/^	hardware_interface::JointStateInterface joint_state_interface_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_velocity_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> joint_velocity_;$/;"	m	class:ros_control_ur::UrHardwareInterface
joint_velocity_command_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> joint_velocity_command_;$/;"	m	class:ros_control_ur::UrHardwareInterface
keepalive_	../include/ur_modern_driver/ur_communication.h	/^	bool keepalive_;$/;"	m	class:UrCommunication
keepalive_	../include/ur_modern_driver/ur_realtime_communication.h	/^	bool keepalive_;$/;"	m	class:UrRealtimeCommunication
line	./main.cpp	/^bool line(std::vector<Pose> poins_lines)$/;"	f
linear_momentum_norm_	../include/ur_modern_driver/robot_state_RT.h	/^	double linear_momentum_norm_; \/\/Norm of Cartesian linear momentum$/;"	m	class:RobotStateRT
listener	./main.cpp	/^libfreenect2::SyncMultiFrameListener *listener;$/;"	v
local_ip_	../include/ur_modern_driver/ur_realtime_communication.h	/^	std::string local_ip_;$/;"	m	class:UrRealtimeCommunication
m_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> m_target_; \/\/Target joint moments (torques)$/;"	m	class:RobotStateRT
main	./main.cpp	/^int main( int argc, const char** argv )$/;"	f
major_version	../include/ur_modern_driver/robot_state.h	/^	uint8_t major_version;$/;"	m	struct:version_message
masterBoardTemperature	../include/ur_modern_driver/robot_state.h	/^	float masterBoardTemperature;$/;"	m	struct:masterboard_data
masterIOCurrent	../include/ur_modern_driver/robot_state.h	/^	float masterIOCurrent;$/;"	m	struct:masterboard_data
masterOnOffState	../include/ur_modern_driver/robot_state.h	/^	unsigned char masterOnOffState;$/;"	m	struct:masterboard_data
masterboard_data	../include/ur_modern_driver/robot_state.h	/^struct masterboard_data {$/;"	s
max_vel_change_	../include/ur_modern_driver/ur_hardware_interface.h	/^	double max_vel_change_;$/;"	m	class:ros_control_ur::UrHardwareInterface
maximum_payload_	../include/ur_modern_driver/ur_driver.h	/^	double maximum_payload_;$/;"	m	class:UrDriver
maximum_time_step_	../include/ur_modern_driver/ur_driver.h	/^	double maximum_time_step_;$/;"	m	class:UrDriver
mb_data_	../include/ur_modern_driver/robot_state.h	/^	masterboard_data mb_data_;$/;"	m	class:RobotState
messageType	../include/ur_modern_driver/robot_state.h	/^typedef message_types::message_type messageType;$/;"	t
message_type	../include/ur_modern_driver/robot_state.h	/^enum message_type {$/;"	g	namespace:message_types
message_types	../include/ur_modern_driver/robot_state.h	/^namespace message_types {$/;"	n
minimum_payload_	../include/ur_modern_driver/ur_driver.h	/^	double minimum_payload_;$/;"	m	class:UrDriver
minor_version	../include/ur_modern_driver/robot_state.h	/^	uint8_t minor_version;$/;"	m	struct:version_message
motor_temperatures_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> motor_temperatures_; \/\/Temperature of each joint in degrees celsius$/;"	m	class:RobotStateRT
new_data_available_	../include/ur_modern_driver/robot_state.h	/^	bool new_data_available_; \/\/to avoid spurious wakes$/;"	m	class:RobotState
new_sockfd_	../include/ur_modern_driver/ur_driver.h	/^	int new_sockfd_;$/;"	m	class:UrDriver
nh_	../include/ur_modern_driver/ur_hardware_interface.h	/^	ros::NodeHandle nh_;$/;"	m	class:ros_control_ur::UrHardwareInterface
ntohd	./robot_state.cpp	/^double RobotState::ntohd(uint64_t nf) {$/;"	f	class:RobotState
ntohd	./robot_state_RT.cpp	/^double RobotStateRT::ntohd(uint64_t nf) {$/;"	f	class:RobotStateRT
num_joints_	../include/ur_modern_driver/ur_hardware_interface.h	/^		std::size_t num_joints_;$/;"	m	class:ros_control_ur::UrHardwareInterface
openServo	./ur_driver.cpp	/^bool UrDriver::openServo() {$/;"	f	class:UrDriver
origin	./main.cpp	/^Point origin;$/;"	v
pMsg_cond_	../include/ur_modern_driver/robot_state.h	/^	std::condition_variable* pMsg_cond_; \/\/Signals that new vars are available$/;"	m	class:RobotState
pMsg_cond_	../include/ur_modern_driver/robot_state_RT.h	/^	std::condition_variable* pMsg_cond_; \/\/Signals that new vars are available$/;"	m	class:RobotStateRT
packageType	../include/ur_modern_driver/robot_state.h	/^typedef package_types::package_type packageType;$/;"	t
package_type	../include/ur_modern_driver/robot_state.h	/^enum package_type {$/;"	g	namespace:package_types
package_types	../include/ur_modern_driver/robot_state.h	/^namespace package_types {$/;"	n
pipeline	./main.cpp	/^libfreenect2::PacketPipeline *pipeline ;$/;"	v
poins_ag	./main.cpp	/^std::vector<Pose> poins_ag;$/;"	v
poins_circle	./main.cpp	/^std::vector<Pose> poins_circle;$/;"	v
poins_lines	./main.cpp	/^std::vector<Pose> poins_lines;$/;"	v
poins_rect	./main.cpp	/^std::vector<Pose> poins_rect;$/;"	v
points	./main.cpp	/^std::vector<cv::Point> points;$/;"	v
position_interface_running_	../include/ur_modern_driver/ur_hardware_interface.h	/^	bool position_interface_running_;$/;"	m	class:ros_control_ur::UrHardwareInterface
position_joint_interface_	../include/ur_modern_driver/ur_hardware_interface.h	/^	hardware_interface::PositionJointInterface position_joint_interface_;$/;"	m	class:ros_control_ur::UrHardwareInterface
prev_joint_velocity_command_	../include/ur_modern_driver/ur_hardware_interface.h	/^	std::vector<double> prev_joint_velocity_command_;$/;"	m	class:ros_control_ur::UrHardwareInterface
pri_serv_addr_	../include/ur_modern_driver/ur_communication.h	/^	struct sockaddr_in pri_serv_addr_, sec_serv_addr_;$/;"	m	class:UrCommunication	typeref:struct:UrCommunication::sockaddr_in
pri_sockfd_	../include/ur_modern_driver/ur_communication.h	/^	int pri_sockfd_, sec_sockfd_;$/;"	m	class:UrCommunication
print_debug	./do_output.cpp	/^void print_debug(std::string inp) {$/;"	f
print_error	./do_output.cpp	/^void print_error(std::string inp) {$/;"	f
print_fatal	./do_output.cpp	/^void print_fatal(std::string inp) {$/;"	f
print_info	./do_output.cpp	/^void print_info(std::string inp) {$/;"	f
print_warning	./do_output.cpp	/^void print_warning(std::string inp) {$/;"	f
project_name	../include/ur_modern_driver/robot_state.h	/^	char project_name[15];$/;"	m	struct:version_message
project_name_size	../include/ur_modern_driver/robot_state.h	/^	int8_t project_name_size;$/;"	m	struct:version_message
q_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> q_actual_; \/\/Actual joint positions$/;"	m	class:RobotStateRT
q_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> q_target_; \/\/Target joint positions$/;"	m	class:RobotStateRT
qd_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> qd_actual_; \/\/Actual joint velocities$/;"	m	class:RobotStateRT
qd_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> qd_target_; \/\/Target joint velocities$/;"	m	class:RobotStateRT
qdd_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> qdd_target_; \/\/Target joint accelerations$/;"	m	class:RobotStateRT
registration	./main.cpp	/^libfreenect2::Registration* registration; $/;"	v
reverse_connected_	../include/ur_modern_driver/ur_driver.h	/^	bool reverse_connected_;$/;"	m	class:UrDriver
robotCurrent	../include/ur_modern_driver/robot_state.h	/^	float robotCurrent;$/;"	m	struct:masterboard_data
robotMessageType	../include/ur_modern_driver/robot_state.h	/^typedef robot_message_types::robot_message_type robotMessageType;$/;"	t
robotMode	../include/ur_modern_driver/robot_state.h	/^	unsigned char robotMode;$/;"	m	struct:robot_mode_data
robotStateTypeV18	../include/ur_modern_driver/robot_state.h	/^typedef robot_state_type_v18::robot_state_type robotStateTypeV18;$/;"	t
robotStateTypeV30	../include/ur_modern_driver/robot_state.h	/^typedef robot_state_type_v30::robot_state_type robotStateTypeV30;$/;"	t
robotVoltage48V	../include/ur_modern_driver/robot_state.h	/^	float robotVoltage48V;$/;"	m	struct:masterboard_data
robot_	../include/ur_modern_driver/ur_hardware_interface.h	/^	UrDriver* robot_;$/;"	m	class:ros_control_ur::UrHardwareInterface
robot_force_	../include/ur_modern_driver/ur_hardware_interface.h	/^	double robot_force_[3] = { 0., 0., 0. };$/;"	m	class:ros_control_ur::UrHardwareInterface
robot_message_type	../include/ur_modern_driver/robot_state.h	/^	int8_t robot_message_type;$/;"	m	struct:version_message
robot_message_type	../include/ur_modern_driver/robot_state.h	/^enum robot_message_type {$/;"	g	namespace:robot_message_types
robot_message_types	../include/ur_modern_driver/robot_state.h	/^namespace robot_message_types {$/;"	n
robot_mode_	../include/ur_modern_driver/robot_state.h	/^	robot_mode_data robot_mode_;$/;"	m	class:RobotState
robot_mode_	../include/ur_modern_driver/robot_state_RT.h	/^	double robot_mode_; \/\/Robot mode$/;"	m	class:RobotStateRT
robot_mode_data	../include/ur_modern_driver/robot_state.h	/^struct robot_mode_data {$/;"	s
robot_mode_running_	../include/ur_modern_driver/robot_state.h	/^	unsigned char robot_mode_running_;$/;"	m	class:RobotState
robot_state_	../include/ur_modern_driver/ur_communication.h	/^	RobotState* robot_state_;$/;"	m	class:UrCommunication
robot_state_	../include/ur_modern_driver/ur_realtime_communication.h	/^	RobotStateRT* robot_state_;$/;"	m	class:UrRealtimeCommunication
robot_state_type	../include/ur_modern_driver/robot_state.h	/^enum robot_state_type {$/;"	g	namespace:robot_state_type_v18
robot_state_type	../include/ur_modern_driver/robot_state.h	/^enum robot_state_type {$/;"	g	namespace:robot_state_type_v30
robot_state_type_v18	../include/ur_modern_driver/robot_state.h	/^namespace robot_state_type_v18 {$/;"	n
robot_state_type_v30	../include/ur_modern_driver/robot_state.h	/^namespace robot_state_type_v30 {$/;"	n
robot_torque_	../include/ur_modern_driver/ur_hardware_interface.h	/^	double robot_torque_[3] = { 0., 0., 0. };$/;"	m	class:ros_control_ur::UrHardwareInterface
ros_control_ur	../include/ur_modern_driver/ur_hardware_interface.h	/^namespace ros_control_ur {$/;"	n
rt_interface_	../include/ur_modern_driver/ur_driver.h	/^	UrRealtimeCommunication* rt_interface_;$/;"	m	class:UrDriver
run	./ur_communication.cpp	/^void UrCommunication::run() {$/;"	f	class:UrCommunication
run	./ur_realtime_communication.cpp	/^void UrRealtimeCommunication::run() {$/;"	f	class:UrRealtimeCommunication
safetyMode	../include/ur_modern_driver/robot_state.h	/^	unsigned char safetyMode;$/;"	m	struct:masterboard_data
safety_count_	../include/ur_modern_driver/ur_realtime_communication.h	/^	unsigned int safety_count_;$/;"	m	class:UrRealtimeCommunication
safety_count_max_	../include/ur_modern_driver/ur_realtime_communication.h	/^	unsigned int safety_count_max_;$/;"	m	class:UrRealtimeCommunication
safety_mode_	../include/ur_modern_driver/robot_state_RT.h	/^	double safety_mode_; \/\/Safety mode$/;"	m	class:RobotStateRT
sec_interface_	../include/ur_modern_driver/ur_driver.h	/^	UrCommunication* sec_interface_;$/;"	m	class:UrDriver
sec_serv_addr_	../include/ur_modern_driver/ur_communication.h	/^	struct sockaddr_in pri_serv_addr_, sec_serv_addr_;$/;"	m	class:UrCommunication	typeref:struct:UrCommunication::
sec_sockfd_	../include/ur_modern_driver/ur_communication.h	/^	int pri_sockfd_, sec_sockfd_;$/;"	m	class:UrCommunication
selectObject	./main.cpp	/^bool selectObject = false;$/;"	v
selection	./main.cpp	/^Rect selection;$/;"	v
serv_addr_	../include/ur_modern_driver/ur_realtime_communication.h	/^	struct sockaddr_in serv_addr_;$/;"	m	class:UrRealtimeCommunication	typeref:struct:UrRealtimeCommunication::sockaddr_in
server_	../include/ur_modern_driver/ur_communication.h	/^	struct hostent *server_;$/;"	m	class:UrCommunication	typeref:struct:UrCommunication::hostent
server_	../include/ur_modern_driver/ur_realtime_communication.h	/^	struct hostent *server_;$/;"	m	class:UrRealtimeCommunication	typeref:struct:UrRealtimeCommunication::hostent
servoj	./ur_driver.cpp	/^void UrDriver::servoj(std::vector<double> positions, int keepalive) {$/;"	f	class:UrDriver
servoj_gain_	../include/ur_modern_driver/ur_driver.h	/^	double servoj_gain_;$/;"	m	class:UrDriver
servoj_lookahead_time_	../include/ur_modern_driver/ur_driver.h	/^	double servoj_lookahead_time_;$/;"	m	class:UrDriver
servoj_time_	../include/ur_modern_driver/ur_driver.h	/^	double servoj_time_;$/;"	m	class:UrDriver
setAnalogOut	./ur_driver.cpp	/^void UrDriver::setAnalogOut(unsigned int n, double f) {$/;"	f	class:UrDriver
setControllerUpdated	./robot_state_RT.cpp	/^void RobotStateRT::setControllerUpdated() {$/;"	f	class:RobotStateRT
setDataPublished	./robot_state_RT.cpp	/^void RobotStateRT::setDataPublished() {$/;"	f	class:RobotStateRT
setDigitalOut	./ur_driver.cpp	/^void UrDriver::setDigitalOut(unsigned int n, bool b) {$/;"	f	class:UrDriver
setDisconnected	./robot_state.cpp	/^void RobotState::setDisconnected() {$/;"	f	class:RobotState
setFlag	./ur_driver.cpp	/^void UrDriver::setFlag(unsigned int n, bool b) {$/;"	f	class:UrDriver
setJointNames	./ur_driver.cpp	/^void UrDriver::setJointNames(std::vector<std::string> jn) {$/;"	f	class:UrDriver
setLabel	./main.cpp	/^void setLabel(cv::Mat& im, const std::string label, std::vector<cv::Point>& contour)$/;"	f
setMaxPayload	./ur_driver.cpp	/^void UrDriver::setMaxPayload(double m) {$/;"	f	class:UrDriver
setMinPayload	./ur_driver.cpp	/^void UrDriver::setMinPayload(double m) {$/;"	f	class:UrDriver
setPayload	./ur_driver.cpp	/^bool UrDriver::setPayload(double m) {$/;"	f	class:UrDriver
setSafetyCountMax	./ur_realtime_communication.cpp	/^void UrRealtimeCommunication::setSafetyCountMax(uint inp) {$/;"	f	class:UrRealtimeCommunication
setServojGain	./ur_driver.cpp	/^void UrDriver::setServojGain(double g){$/;"	f	class:UrDriver
setServojLookahead	./ur_driver.cpp	/^void UrDriver::setServojLookahead(double t){$/;"	f	class:UrDriver
setServojTime	./ur_driver.cpp	/^void UrDriver::setServojTime(double t) {$/;"	f	class:UrDriver
setSpeed	./ur_driver.cpp	/^void UrDriver::setSpeed(double q0, double q1, double q2, double q3, double q4,$/;"	f	class:UrDriver
setSpeed	./ur_realtime_communication.cpp	/^void UrRealtimeCommunication::setSpeed(double q0, double q1, double q2,$/;"	f	class:UrRealtimeCommunication
setToolVoltage	./ur_driver.cpp	/^void UrDriver::setToolVoltage(unsigned int v) {$/;"	f	class:UrDriver
setVersion	./robot_state_RT.cpp	/^void RobotStateRT::setVersion(double ver) {$/;"	f	class:RobotStateRT
showHist	./main.cpp	/^bool showHist = true;$/;"	v
smin	./main.cpp	/^int vmin = 10, vmax = 256, smin = 30;$/;"	v
sockfd_	../include/ur_modern_driver/ur_realtime_communication.h	/^	int sockfd_;$/;"	m	class:UrRealtimeCommunication
source	../include/ur_modern_driver/robot_state.h	/^	int8_t source;$/;"	m	struct:version_message
speedScaling	../include/ur_modern_driver/robot_state.h	/^	double speedScaling;$/;"	m	struct:robot_mode_data
speed_scaling_	../include/ur_modern_driver/robot_state_RT.h	/^	double speed_scaling_; \/\/Speed scaling of the trajectory limiter$/;"	m	class:RobotStateRT
start	./ur_communication.cpp	/^bool UrCommunication::start() {$/;"	f	class:UrCommunication
start	./ur_driver.cpp	/^bool UrDriver::start() {$/;"	f	class:UrDriver
start	./ur_realtime_communication.cpp	/^bool UrRealtimeCommunication::start() {$/;"	f	class:UrRealtimeCommunication
stopTraj	./ur_driver.cpp	/^void UrDriver::stopTraj() {$/;"	f	class:UrDriver
svn_revision	../include/ur_modern_driver/robot_state.h	/^	int svn_revision;$/;"	m	struct:version_message
targetSpeedFraction	../include/ur_modern_driver/robot_state.h	/^	double targetSpeedFraction;$/;"	m	struct:robot_mode_data
tcp_force_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tcp_force_; \/\/Generalised forces in the TC$/;"	m	class:RobotStateRT
tcp_speed_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tcp_speed_actual_; \/\/Actual speed of the tool given in Cartesian coordinates$/;"	m	class:RobotStateRT
tcp_speed_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tcp_speed_target_; \/\/Target speed of the tool given in Cartesian coordinates$/;"	m	class:RobotStateRT
time_	../include/ur_modern_driver/robot_state_RT.h	/^	double time_; \/\/Time elapsed since the controller was started$/;"	m	class:RobotStateRT
timestamp	../include/ur_modern_driver/robot_state.h	/^	uint64_t timestamp;$/;"	m	struct:robot_mode_data
timestamp	../include/ur_modern_driver/robot_state.h	/^	uint64_t timestamp;$/;"	m	struct:version_message
tool_accelerometer_values_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tool_accelerometer_values_; \/\/Tool x,y and z accelerometer values (software version 1.7)$/;"	m	class:RobotStateRT
tool_vector_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tool_vector_actual_; \/\/Actual Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation$/;"	m	class:RobotStateRT
tool_vector_target_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> tool_vector_target_; \/\/Target Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation$/;"	m	class:RobotStateRT
trackObject	./main.cpp	/^int trackObject = 0;$/;"	v
unpack	./robot_state.cpp	/^void RobotState::unpack(uint8_t* buf, unsigned int buf_length) {$/;"	f	class:RobotState
unpack	./robot_state_RT.cpp	/^void RobotStateRT::unpack(uint8_t * buf) {$/;"	f	class:RobotStateRT
unpackDigitalInputBits	./robot_state_RT.cpp	/^std::vector<bool> RobotStateRT::unpackDigitalInputBits(int64_t data) {$/;"	f	class:RobotStateRT
unpackRobotMessage	./robot_state.cpp	/^void RobotState::unpackRobotMessage(uint8_t * buf, unsigned int offset,$/;"	f	class:RobotState
unpackRobotMessageVersion	./robot_state.cpp	/^void RobotState::unpackRobotMessageVersion(uint8_t * buf, unsigned int offset,$/;"	f	class:RobotState
unpackRobotMode	./robot_state.cpp	/^void RobotState::unpackRobotMode(uint8_t * buf, unsigned int offset) {$/;"	f	class:RobotState
unpackRobotState	./robot_state.cpp	/^void RobotState::unpackRobotState(uint8_t * buf, unsigned int offset,$/;"	f	class:RobotState
unpackRobotStateMasterboard	./robot_state.cpp	/^void RobotState::unpackRobotStateMasterboard(uint8_t * buf,$/;"	f	class:RobotState
unpackVector	./robot_state_RT.cpp	/^std::vector<double> RobotStateRT::unpackVector(uint8_t * buf, int start_index,$/;"	f	class:RobotStateRT
uploadProg	./ur_driver.cpp	/^bool UrDriver::uploadProg() {$/;"	f	class:UrDriver
v_actual_	../include/ur_modern_driver/robot_state_RT.h	/^	std::vector<double> v_actual_; \/\/Actual joint voltages$/;"	m	class:RobotStateRT
v_main_	../include/ur_modern_driver/robot_state_RT.h	/^	double v_main_; \/\/Masterboard: Main voltage$/;"	m	class:RobotStateRT
v_robot_	../include/ur_modern_driver/robot_state_RT.h	/^	double v_robot_; \/\/Matorborad: Robot voltage (48V)$/;"	m	class:RobotStateRT
val_lock_	../include/ur_modern_driver/robot_state.h	/^	std::recursive_mutex val_lock_; \/\/ Locks the variables while unpack parses data;$/;"	m	class:RobotState
val_lock_	../include/ur_modern_driver/robot_state_RT.h	/^	std::mutex val_lock_; \/\/ Locks the variables while unpack parses data;$/;"	m	class:RobotStateRT
velocity_interface_running_	../include/ur_modern_driver/ur_hardware_interface.h	/^	bool velocity_interface_running_;$/;"	m	class:ros_control_ur::UrHardwareInterface
velocity_joint_interface_	../include/ur_modern_driver/ur_hardware_interface.h	/^	hardware_interface::VelocityJointInterface velocity_joint_interface_;$/;"	m	class:ros_control_ur::UrHardwareInterface
version_	../include/ur_modern_driver/robot_state_RT.h	/^	double version_; \/\/protocol version$/;"	m	class:RobotStateRT
version_message	../include/ur_modern_driver/robot_state.h	/^struct version_message {$/;"	s
version_msg_	../include/ur_modern_driver/robot_state.h	/^	version_message version_msg_;$/;"	m	class:RobotState
vmax	./main.cpp	/^int vmin = 10, vmax = 256, smin = 30;$/;"	v
vmin	./main.cpp	/^int vmin = 10, vmax = 256, smin = 30;$/;"	v
x	./main.cpp	/^	float x=0.5;$/;"	m	struct:__anon1	file:
y	./main.cpp	/^	float y;$/;"	m	struct:__anon1	file:
z	./main.cpp	/^	float z;$/;"	m	struct:__anon1	file:
~RobotStateRT	./robot_state_RT.cpp	/^RobotStateRT::~RobotStateRT() {$/;"	f	class:RobotStateRT
